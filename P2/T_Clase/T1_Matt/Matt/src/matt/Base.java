/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matt;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

public class Base extends javax.swing.JFrame {

    /**
     * Creates new form Base
     */
    private javax.swing.JMenuItem menuItemRestore;
    private javax.swing.JMenuItem menuItemSalir;
    private javax.swing.JPopupMenu popupContextual;
    private javax.swing.JSeparator separator;
    private SystemTray tray;
    private final TrayIcon trayIcon;

    public Base() {
        initComponents();

        Image image = Toolkit.getDefaultToolkit().getImage("tray.gif");
        trayIcon = new TrayIcon(image, "Tray Demo", null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupContextual = new javax.swing.JPopupMenu();
        menuItemRestore = new javax.swing.JMenuItem();
        separator = new javax.swing.JSeparator();
        menuItemSalir = new javax.swing.JMenuItem();

        menuItemRestore.setText("Restaurar");
        menuItemRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRestoreActionPerformed(evt);
            }
        });
        popupContextual.add(menuItemRestore);
        popupContextual.add(separator);

        menuItemSalir.setText("Salir");
        menuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSalirActionPerformed(evt);
            }
        });
        popupContextual.add(menuItemSalir);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Systray App Test");
        setName("base"); // NOI18N
        setResizable(false);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                EstadoCambiado(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EstadoCambiado(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_EstadoCambiado

        if (evt.getNewState() == ICONIFIED) {
            this.setState(NORMAL);
            this.setVisible(false);

            if (SystemTray.isSupported()) {

                tray = SystemTray.getSystemTray();

                MouseListener mouseListener = new MouseListener() {

                    public void mouseClicked(MouseEvent e) {
                        if (e.getButton() == e.BUTTON1) {
                            trayIcon.displayMessage("AppTray", "Haz hecho clic sobre mi!", TrayIcon.MessageType.INFO);
                        }
                    }

                    public void mouseEntered(MouseEvent e) {

                    }

                    public void mouseExited(MouseEvent e) {

                    }

                    public void mousePressed(MouseEvent e) {

                    }

                    public void mouseReleased(MouseEvent e) {
                        if (e.isPopupTrigger()) {
                            popupContextual.setLocation(e.getX(), e.getY());
                            popupContextual.setInvoker(popupContextual);
                            popupContextual.setVisible(true);
                        }
                    }
                };

                trayIcon.setImageAutoSize(true);
                trayIcon.addMouseListener(mouseListener);
                trayIcon.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        menuItemRestoreActionPerformed(e);
                    }
                }
                );

                try {
                    tray.add(trayIcon);
                } catch (AWTException e) {
                    System.err.println("No se pudo agregar el Ã­cono a la barra tray");
                    this.setVisible(true);
                }
            } else {
                //  System Tray is not supported
            }
        }
    }//GEN-LAST:event_EstadoCambiado

    private void menuItemRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRestoreActionPerformed
        this.setVisible(true);//GEN-LAST:event_menuItemRestoreActionPerformed
        this.toFront();
        tray.remove(trayIcon);
    }

    private void menuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuItemSalirActionPerformed
public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Base().setVisible(true);
            }
        });
    }
}
